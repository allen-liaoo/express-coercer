import { defaultCoercer } from "./default_coercers"
import { search } from "./searcher"
import { coerce } from "./coercer"
import { CoerceError, CoerceResult } from "./types"

/*
 * Takes all values in all objects and arrays, and coerces any values from
 * 1. 'true' and 'false' to boolean
 * 2. Number strings (i.e. '0', '3.4', '23e5') to numbers
 * (This uses the default coercer)
*/
export function defaultMiddleware(): ((req, res, next) => void)[] {
    return [search({}), coerce(defaultCoercer)]
}

function buildArrayString(arr: string[]) {
    return arr.reduce((acc: string, cur: string) => {
        if (!acc) return cur
        return acc + ', ' + cur
    }, '')
}

/*
 * A middleware to find the first failed coercion and send back a status 400 response
 */
export function validateAny(req, res, next): void {
    const first: CoerceResult = req?.coercer?.results?.find(r => !r.success)
    if (!first) {
        next()
        return
    }

    res.status(400).json({
        error: `Key "${first.key}" should have the format: ${buildArrayString(first.error.expectedFormats)}`
    })
    // Don't call next() to stop the chain of execution
}

/*
 * A middleware to find all the failed coercions and send back a status 400 response including 
 * from the failed coercions.
 */
export function validateAll(req, res, next): void {
    const results: CoerceResult[] = req?.coercer?.results
    if (!results) {
        next()
        return
    }

    const errors = results.filter(r => !r.success).map(r => {
        if (CoerceError.isCoerceError(r.error)) {
            // create string to show the list of formats (without [] and with ", " inbetween each element)
            const arrStr = buildArrayString(r.error.expectedFormats)

            // return appropriate message
            return r.error.expectedFormats.length > 1 ? 
                `Key "${r.key}" should have one of the following formats: ${arrStr}`
                : `Key "${r.key}" should have the format: ${arrStr}`
        }
        return r
    })

    if (errors.length == 0) {
        next()
        return
    }

    res.status(400).json({
        error: 'Invalid request format. See errors array for a list of errors (This message is generated by express-coercer).',
        errors: errors
    })
}