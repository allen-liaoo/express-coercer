import { CoerceError, CoerceResult } from "./types"

function defaultValidatorFunction(results: CoerceResult[], req, res, next) {
    if (results.length !== 0 && results.find(r => !r.success)) {
        res.status(400).json({
            error: 'Invalid request format. See errors array for a list of errors (This message is generated by express-coercer).',
            errors: results.filter(r => !r.success).map(r => {
                if (CoerceError.isCoerceError(r.error))
                    return `Expecting the value of ${r.key} to have one of the following formats: ${JSON.stringify(r.error.expectedFormats)}`
                else return r
            })
        })
        // Don't call next() to stop the chain of execution
    } else next()
}

/*
Validates a request with a validator function
validator: A callback function that takes a list of results and "validates" it. 
    It has access to the request, response and next fields of a middleware
*/
export function validate(validator: (results: CoerceResult[], req, res, next) => void = defaultValidatorFunction) {
    return function(req, res, next) {
        if (!req.coercer) throw "Cannot validate a request when there are no searcher and coercer set up!"
        validator(req.coercer.results, req, res, next)
    }
}